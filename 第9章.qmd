---
title: "差の差法の基礎"
format:
  html: 
    theme: journal
    highlight-style: pygments
    page-layout: full
number-sections: true
toc: true
toc-depth: 3
toc-location: left
code-fold: show
date: "最終更新: `r Sys.Date()`"
---

```{r setup, include=FALSE}
rm(list = ls())
knitr::opts_chunk$set(cache = FALSE, echo = TRUE, fig.align = "center", warning = FALSE)
library(tidysynth)
library(magrittr)
library(ggplot2)
library(kableExtra)
library(modelsummary)
library(CausalInferenceTextbook)
color_main <- scales::viridis_pal(option = "C")(1)
```

# 2方向固定効果（TWFE）推定

参照： [因果推論の計量経済学（川口、澤田）：第9章　差の差法の基礎（第10章　差の差法とその周辺の発展的トピック）](https://github.com/keisemi/EconometriciansGuide_CausalInference/blob/main/main/difference_in_differences_TWFE.html)

## シミュレーションデータの生成

### 定数とパラメータの設定
```{r}
N <- 1000  #個体数
T0 <- 4
T1 <- 6
T <- T0 + T1　#期間
```

処置が処置群全体に同時に割り当てられるデザイン（の正規分布のパラメータ）
```{r}
mean_tau_i_simul <- 0.05
sd_tau_i_simul <- 0.2
```

処置群のなかで処置が段階的に割り当てられていくデザイン

（
※正規分布の絶対値に以下の効果量の乗数をかけたものを処置効果とし、処置割り当てのタイミングごとに異なる符号の効果を発生させる）
```{r}
mean_tau_i_multi <- 0.1
sd_tau_i_multi <- 0.2

scale_5 <- 1
scale_6 <- -2.5
scale_7 <- -1.75
scale_8 <- -1
```

### 同時割り当てデータの生成

※データ生成過程については参照サイトの記述を参照
```{r}
set.seed(1)
df_design <- 
  generate_df_no_covariates(
    N = N,
    T = T,
    T0 = T0,
    mean_tau_i = mean_tau_i_simul,
    sd_tau_i = sd_tau_i_simul
  )
```

生成した10期間の処置群平均処置効果の期間全体平均
```{r}
att_pop <- 
  df_design %>% 
  dplyr::filter(time > T0) %>% 
  dplyr::pull(tau_t) %>% 
  unique()  #6つの処置期間それぞれのtau_tを抽出

att_pop <- 
  mean(att_pop) * mean_tau_i_simul

att_pop  #ATTの期間全体平均
```

処置期間ごとのATTの平均値を取ったATTの「期間全体平均」は、本来知り得ない母集団におけるパラメータから算出した母集団のATTとは必ずしも一致しない。
```{r}
att_sample <- 
  df_design %>% 
  dplyr::filter(
    time > T0,
    g_i == 1
  ) %>% 
  dplyr::summarise(
    att_sample = mean(tau_it)
  ) %>% 
  dplyr::pull(att_sample)

att_sample
```

### 複数時点での処置発生データの生成

※データ生成過程については参照サイトの記述を参照
```{r}
set.seed(1)

df_design_multiperiod <- 
  generate_df_multiperiod(
    N = N,
    T = T,
    T1 = T1,
    T0 = T0,
    diff_trend = FALSE,
    mean_tau_i = mean_tau_i_multi,
    sd_tau_i = sd_tau_i_multi,
    scale_5 = scale_5,
    scale_6 = scale_6,
    scale_7 = scale_7,
    scale_8 = scale_8
  )
```

各コホートの割合は以下
```{r}
df_design_multiperiod %>% 
  dplyr::group_by(group_i) %>% 
  dplyr::summarise(
    fraction = length(z_it) 
  ) %>% 
  dplyr::ungroup() %>% 
  dplyr::mutate(
    fraction = fraction / sum(fraction)
  ) %>% 
  kbl() %>% 
  kable_styling()
```

各コホートの「期間平均」のATTを算出するため、まず時間効果の期待値の絶対値$|\tau_i|$を算出する。
```{r}
mean_abs_tau_i <- 
  (
    mean_tau_i_multi + 
      sd_tau_i_multi * (
        dnorm((-mean_tau_i_multi) / sd_tau_i_multi)) / 
      (1 - pnorm((-mean_tau_i_multi) / sd_tau_i_multi))
   ) * 
    pnorm(mean_tau_i_multi / sd_tau_i_multi) -
  (
    mean_tau_i_multi -
     sd_tau_i_multi * (
        dnorm((-mean_tau_i_multi) / sd_tau_i_multi)) / 
     (pnorm((-mean_tau_i_multi) / sd_tau_i_multi))
   ) * 
    (1 - pnorm(mean_tau_i_multi / sd_tau_i_multi))
```

次にこの$\mathbb{E}[|\tau_i|]$をもとに、ATTの「期間平均」を算出する。
```{r}
att_pop_multiperiod_group <- 
  df_design_multiperiod %>% 
  dplyr::filter(
    time > T0,
    g5_i == 1
  ) %>% 
  dplyr::summarise(
    group = "5",
    att_pop_multiperiod = 
      mean(unique(tau_t)) * scale_5 * mean_abs_tau_i,
    fraction_within_group = 
      sum(z_it) / sum(df_design_multiperiod$z_it)
  )

att_pop_multiperiod_group <- 
  rbind(
    att_pop_multiperiod_group,
    df_design_multiperiod %>% 
    dplyr::filter(
      time > T0 + 1,
      g6_i == 1
    ) %>% 
    dplyr::summarise(
      group = "6",
      att_pop_multiperiod = 
        mean(unique(tau_t)) * scale_6 * mean_abs_tau_i,
      fraction_within_group = 
        sum(z_it) / sum(df_design_multiperiod$z_it)
  ))

att_pop_multiperiod_group <- 
  rbind(
    att_pop_multiperiod_group,
    df_design_multiperiod %>% 
    dplyr::filter(
      time > T0 + 2,
      g7_i == 1
    ) %>% 
    dplyr::summarise(
      group = "7",
      att_pop_multiperiod = 
        mean(unique(tau_t)) * scale_7 * mean_abs_tau_i,
      fraction_within_group = 
        sum(z_it) / sum(df_design_multiperiod$z_it)
  ))

att_pop_multiperiod_group <- 
  rbind(
    att_pop_multiperiod_group,
    df_design_multiperiod %>% 
    dplyr::filter(
      time > T0 + 3,
      g8_i == 1
    ) %>% 
    dplyr::summarise(
      group = "8",
      att_pop_multiperiod = 
        mean(unique(tau_t)) * scale_8 * mean_abs_tau_i,
      fraction_within_group = 
        sum(z_it) / sum(df_design_multiperiod$z_it)
  ))

att_pop_multiperiod_group %>% 
  kbl() %>% 
  kable_styling()
```

それぞれのグループの割合について加重平均を取り、母集団におけるATTの期間平均を算出。
```{r}
att_pop_multiperiod <- 
  att_pop_multiperiod_group$att_pop_multiperiod %*%
  att_pop_multiperiod_group$fraction_within_group

att_pop_multiperiod

# 上記は以下の計算と同じ（%*%が加重平均を返す）
# att_pop_multiperiod <-
#   att_pop_multiperiod_group$att_pop_multiperiod *
#   att_pop_multiperiod_group$fraction_within_group
# 
# sum(att_pop_multiperiod)
```

本来知り得ない母集団におけるパラメータである`tau_i`と`tau_t`からの算出ではなく、標本の`tau_it`の値を直接使い各コホートのATTを計算すると、母集団におけるATTとは厳密には一致しない。
```{r}
att_sample_multiperiod_group <- 
  df_design_multiperiod %>% 
  dplyr::filter(
    group_i > 0
  ) %>% 
  dplyr::group_by(
    group_i
  ) %>% 
  dplyr::summarise(
    att_sample = sum(tau_it * (time >= group_i)) / sum(time >= group_i)
  )

att_sample_multiperiod_group %>% 
  kbl() %>% 
  kable_styling()
```

標本の`tau_it`の値から全コホートのATTを算出。
```{r}
att_sample_multiperiod <- 
  df_design_multiperiod %>% 
  dplyr::filter(
    z_it > 0
  ) %>% 
  dplyr::summarise(
    att_sample_multiperiod = mean(tau_it)
  ) %>% 
  dplyr::pull(att_sample_multiperiod)

att_sample_multiperiod
```

## 分析と推計

### 同時割り当てにおける推定

先に生成した`df_design`のうち、実際に観測できる変数は以下。
```{r}
df_design_observed <- 
  df_design %>% 
  dplyr::select(
    id, time, g_i, z_it, y_it
  )

head(df_design_observed) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

<u>**1. 平均の差による差の差の推定**</u>

処置群の割合の算出
```{r}
df_design_observed %>% 
  dplyr::pull(g_i) %>% 
  mean()
```

事後期間の処置群と統制群の平均の差
```{r}
post <- 
  df_design_observed %>% 
  dplyr::filter(
    time > T0
  ) %>% 
  dplyr::summarise(
    sum(y_it * g_i) / sum(g_i) - sum(y_it * (1 - g_i)) / sum(1 - g_i)
  ) %>% 
  dplyr::ungroup()

post
```

事前期間の処置群と統制群の平均の差
```{r}
pre <- 
  df_design_observed %>% 
  dplyr::filter(
    time <= T0
  ) %>% 
  dplyr::summarise(
    sum(y_it * g_i) / sum(g_i) - sum(y_it * (1 - g_i)) / sum(1 - g_i)
  ) %>% 
  dplyr::ungroup()

pre
```

差の差推定量のノンパラメトリックな算出
```{r}
did <- post - pre
did
```

上記の差の差推定により得られた`did``r did`は、母集団におけるATTの期間全体平均`att_pop``r att_pop`の不偏推定量となる。

<br>

<u>**2. TWFEによる差の差推定**</u>

個体固定効果と時間固定効果を入れたTWFE推定量の算出。

以下のモデルの最小二乗推定量を算出し、係数$\tau$をATTの推定量とする。

\begin{align}
Y_{it} = \mu_i + \theta_t + \tau Z_{it} + \epsilon_{it}
\end{align}

```{r}
lsdv <- 
  plm::plm(
    formula = y_it ~ z_it,
    data = df_design_observed,
    index = c("id", "time"),
    effect = "twoways"
  )

clubSandwich::coef_test(
  lsdv,
  vcov = "CR1",
  cluster = "id",
  test = "naive-t"
) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

**（参考）`estimatr::lm_robust`による推計**
`fixed_effects`に`id + time`、`clusters`に`id`、`se_type`に`CR0`を指定することで、同じ推計結果が得られる。
```{r}
estimatr::lm_robust(
  formula = y_it ~ z_it,
  data = df_design_observed,
  fixed_effects = id + time,
  clusters = id,
  se_type = "CR0"
) %>% 
  summary() %>% 
  .$coefficients %>% 
  kbl() %>% 
  kable_styling()
```

<br>

### 複数時点割り当てにおける推定

先に生成した`df_design_multiperiod`のうち、観測できる変数は以下。
```{r}
df_design_multiperiod_observed <- 
  df_design_multiperiod %>% 
  dplyr::select(
    c("id",
      "time",
      "group_i",
      "g5_i",
      "g6_i",
      "g7_i",
      "g8_i",
      "z5_it",
      "z6_it",
      "z7_it",
      "z8_it",
      "z_it",
      "y_it")
  )

head(df_design_multiperiod_observed) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

<u>**1.平均の差による差の差の差推定**</u>

処置群を処置を受けたタイミングごとのグループgroup_iに分け、ずっと処置を受けない (never treated) 統制群と比較することによる差の差法推定。
```{r}
trend_control <- 
  tibble::tibble(
    group_i = c(5, 6, 7, 8),
    trend_control = 
      df_design_multiperiod_observed %>% 
      dplyr::filter(
        group_i == 0
      ) %>% 
      dplyr::summarise(
        trend_5 = 
          sum(y_it * (time >= 5)) / sum(time >= 5) -
          sum(y_it * (time < 5)) / sum(time < 5),
        trend_6 = 
          sum(y_it * (time >= 6)) / sum(time >= 6) -
          sum(y_it * (time < 6)) / sum(time < 6),
        trend_7 = 
          sum(y_it * (time >= 7)) / sum(time >= 7) -
          sum(y_it * (time < 7)) / sum(time < 7),
        trend_8 = 
          sum(y_it * (time >= 8)) / sum(time >= 8) -
          sum(y_it * (time < 8)) / sum(time < 8)
      ) 
  ) 

trend_treated <- 
  df_design_multiperiod_observed %>% 
  dplyr::filter(
    group_i > 0
  ) %>% 
  dplyr::group_by(
    group_i
    ) %>% 
  dplyr::summarise(
    trend_treated =
      sum(y_it * (time >= group_i)) / sum(time >= group_i) -
      sum(y_it * (time < group_i)) / sum(time < group_i),
    proportion = sum(z_it) / sum(df_design_multiperiod$z_it)
  )

df_did <- 
  dplyr::left_join(
    trend_control,
    trend_treated,
    by = "group_i"
  )

df_did <- 
  df_did %>% 
  dplyr::mutate(
    did_dif = trend_treated - trend_control
  ) %>% 
  dplyr::select(
    group_i,
    did_dif,
    proportion
  )

df_did <-  
  df_did %>% 
  dplyr::left_join(
    att_sample_multiperiod_group,
    by = "group_i"
  )

df_did %>% 
  kbl() %>% 
  kable_styling()
```

これらの推定の加重平均を取り、ATTの期間全体平均を算出。
```{r}
cbind(
  df_did %>% 
    dplyr::summarise(
      did_dif_average = sum(did_dif * proportion)
    ),
  att_sample_multiperiod
) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

<u>**2.TWFEによる誤った推定**</u>

以下のようなTWFEモデルの推定は、処置群全体でのATTをうまく推定できず、負の値を取る。

\begin{align}
Y_{it} = \mu_i + \theta_t + \tau Z_{it} + \epsilon_{it}
\end{align}

```{r}
lsdv <- 
  plm::plm(
    formula = y_it ~ z_it,
    data = df_design_multiperiod_observed,
    index = c("id", "time"),
    effect = "twoways"
  )

lsdv %>% 
  clubSandwich::coef_test(
    vcov = "CR1",
    cluster = "id",
    test = "naive-t"
  ) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

**（参考）`estimatr::lm_robust`による推計**
```{r}
estimatr::lm_robust(
  formula = y_it ~ z_it,
  data = df_design_multiperiod_observed,
  fixed_effects = id + time,
  clusters = id,
  se_type = "CR0"
) %>% 
  summary() %>%
  .$coefficients %>%
  kbl() %>% 
  kable_styling()
```

<br>

<u>**3.Goodman-baconによる分解**</u>

```{r}
result <- 
  bacondecomp::bacon(
    formula = y_it ~ z_it,
    data = df_design_multiperiod_observed,
    id_var = "id",
    time_var = "time"
  )
```

```{r}
result %>% 
  ggplot() +
  aes(
    x = weight,
    y = estimate,
    colour = factor(type)
  ) +
  geom_point() +
  scale_color_viridis_d() +
  labs(
    color = "type"
  ) +
  theme(legend.position = "bottom")
```

必ずしもATTと解釈できない`Later vs Earlier Treated`の推定が負の値を取り、この不適切な比較に加重が与えられることによって、母集団におけるATTの期間平均`r att_pop_multiperiod`と大きく乖離した推計となっている。

<br>

<u>**4.修正TWFE推定**</u>

処置時点での層別を適切に行った、処置を受け始めるタイミングのグループと処置期間の時点について飽和した回帰（処置タイミングのコーホートダミー、時点ダミー、それらの処置時点に対応する交差項をすべて入れた回帰）を行う。

※回帰の詳細、フォーミュラについては参照サイトを参照。

```{r}
df_design_multiperiod_observed$z_it_t <- 
  df_design_multiperiod_observed$z_it * 
  df_design_multiperiod_observed$time +
  df_design_multiperiod_observed$z_it *
  df_design_multiperiod_observed$group_i * 100

df_design_multiperiod_observed <- 
  fastDummies::dummy_cols(
    df_design_multiperiod_observed,
    select_columns = "z_it_t"
  )

df_design_multiperiod_observed <- 
  df_design_multiperiod_observed %>% 
  dplyr::select(-"z_it_t_0")

fml <- as.formula(
  paste("y_it ~ ",
        paste(grep(
          "z_it_t_",
          names(df_design_multiperiod_observed),
          value = TRUE
        ),
        collapse = "+"))
)

lsdv <- 
  plm::plm(
    formula = fml,
    data = df_design_multiperiod_observed,
    index = c("id", "time"),
    effect = "twoways"
  )

clubSandwich::coef_test(
  lsdv,
  vcov = "CR1",
  cluster = "id",
  test = "naive-t"
) %>% 
  kbl() %>% 
  kable_styling()
```

得られた係数について、処置タイミングのグループごとに集計。
```{r}
df_compare <- 
  tibble::tibble(
    group_i = c(5, 6, 7, 8),
    did_lsdv = 
      c(
        mean(lsdv$coefficients[grep("z_it_t_5", names(lsdv$coefficients), value = TRUE)], na.rm = TRUE),
        mean(lsdv$coefficients[grep("z_it_t_6", names(lsdv$coefficients), value = TRUE)], na.rm = TRUE),
        mean(lsdv$coefficients[grep("z_it_t_7", names(lsdv$coefficients), value = TRUE)], na.rm = TRUE),
        mean(lsdv$coefficients[grep("z_it_t_8", names(lsdv$coefficients), value = TRUE)], na.rm = TRUE)
      ),
    did_dif = trend_treated$trend_treated - trend_control$trend_control[,1]
  )

df_compare %>% 
  kbl() %>% 
  kable_styling()
```

これらの値の加重平均を取ると、差の差法推定の推定値`did_dif_average`とおおむね一致する推定値を得る。（ただし、修正TWFE推定の回帰には、never-treatedのみならず、not-yet-treatedとの比較も一部含まれるため厳密には一致しない）

```{r}
df_compare$proportion <- 
  df_did$proportion

df_compare %>% 
  dplyr::summarise(
    did_lsdv_average = sum(did_lsdv * proportion),
    did_dif_average = sum(did_dif[,1] * proportion)
  ) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

# 合成コントロール法：標準的デザインにおける推計

参照：[因果推論の計量経済学（川口、澤田）：第9章　差の差法の基礎](https://github.com/keisemi/EconometriciansGuide_CausalInference/blob/main/main/difference_in_differences_synthetic_control.html)

処置群の数が限られる場合における手法としての合成コントロール法を、`tidysynth`パッケージを使い実装する。

分析には`tidysynth`パッケージに含まれる、`smoking`データを使う。
```{r}
data(
  "smoking",
  package = "tidysynth"
)

smoking %>% 
  summary()
```

## データの生成

### 定数とパラメータの設定

仮想的な処置タイミングと処置群の設定。
```{r}
year_start <- 1988
name_treated <- "California"
year_init <- min(smoking$year)
year_end <- max(smoking$year)
total_years <- year_end - year_init
```

```{r}
# 切片項
alpha0_retprice <- 35
alpha0_cigsale <- 140

# 時間効果パラメータ
delta_mean <- 0
delta_sd <- 2

# ファクターのパラメータ
mu_mean <- 0
mu_sd <- 2
```

`cigsale`を減らす処置効果を決定するパラメータ
```{r}
te_unif_lower <- 0.05
te_unif_upper <- 0.1
```

自己回帰モデルのパラメータ
```{r}
# 誤差項分布パラメータ
eta_mean <- 0
eta_sd <- 3

# 自己回帰係数パラメータ
rho <- -0.1
rho_zy <- 0.01
rho_zz <- 0.5
rho_yy <- 0.5
```

合成コントロール法で合わせる期間の設定
```{r}
# 使用する共変量と顕在結果の時点の設定
window_income_age <- 1980:1988
window_beer <- 1984:1988
window_cigsale1 <- 1975
window_cigsale2 <- 1980
window_cigsale3 <- 1988

# ウェイトの計算に用いる期間の設定
window_fit <- 1970:1988
```

最適化にあたって使用する、二次計画ソルバーに渡すチューニングパラメータの設定。
```{r}
margin_ipop <- 0.02
sigf_ipop <- 7
bound_ipop <- 6
```

### データの生成
```{r}
set.seed(1)
```

<u>**ファクターモデル：処置効果がないケース**</u>

`retprice`と`cigsale`が以下の位置変量ファクターモデルで生成でされていると想定。
共に平均0の乱数で生成し、処置効果が無い設定とする。

$$
Y_{it} = \alpha_0 + \delta_t + \lambda_t \mu_i + \epsilon_{it}
$$

```{r}
smoking_fake_factor_no_effect <- 
  smoking %>% 
  dplyr::group_by(state) %>% 
  dplyr::mutate(
    mu_i_retprice = 
      rnorm(n = 1,
            mean = mu_mean,
            sd = mu_sd),
    mu_i_cisale = 
      rnorm(n = 1,
            mean = mu_mean,
            sd = mu_sd)
  ) %>% 
  dplyr::ungroup() %>% 
  dplyr::group_by(year) %>% 
  dplyr::mutate(
    retprice = 
      alpha0_retprice +                # 切片$\alpha_0$
      rnorm(n = 1,                    
            mean = delta_mean,
            sd = delta_sd) +           # $delta_t$
      runif(n = 1) * mu_i_retprice +   # $\lambda_t \mu_i
      rnorm(n = length(state)),        # $\eplison_{it}$
    cigsale = 
      alpha0_cigsale +
      rnorm(n = 1,
            mean = delta_mean,
            sd = delta_sd) +
      runif(n = 1) * mu_i_cisale +
      rnorm(n = length(state))
    ) %>% 
  dplyr::ungroup() %>% 
  dplyr::select(
    -mu_i_retprice,
    -mu_i_cisale
  )
```

<br>

<u>**ファクターモデル：処置効果があるケース**</u>

カリフォルニアでは処置期以降に販売量が減少する状況を想定したデータを生成。
```{r}
smoking_fake_factor_some_effect <- 
  smoking %>% 
  dplyr::group_by(state) %>% 
  dplyr::mutate(
    mu_i_retprice = 
      rnorm(n = 1,
            mean = mu_mean,
            sd = mu_sd),
    mu_i_cigsale = 
      rnorm(n = 1,
            mean = mu_mean,
            sd = mu_sd)
  ) %>% 
  dplyr::ungroup() %>% 
  dplyr::group_by(year) %>% 
  dplyr::mutate(
    retprice = 
      alpha0_retprice +                # 切片$\alpha_0$
      rnorm(n = 1,                    
            mean = delta_mean,
            sd = delta_sd) +           # $delta_t$
      runif(n = 1) * mu_i_retprice +   # $\lambda_t \mu_i
      rnorm(n = length(state)),        # $\eplison_{it}$
    cigsale = 
      alpha0_cigsale +
      rnorm(n = 1,
            mean = delta_mean,
            sd = delta_sd) +
      runif(n = 1) * mu_i_cigsale +
      rnorm(n = length(state))
  ) %>% 
  dplyr::ungroup() %>% 
  dplyr::select(
    -mu_i_retprice,
    -mu_i_cigsale
  ) %>% 
  dplyr::mutate(
    cigsale = 
      ifelse(
        state == name_treated & year > year_start,
        cigsale * (
          1 - runif(n = 1,
                    te_unif_lower,
                    te_unif_upper)
        ),
        cigsale
      )
  )
```

<br>

<u>**自己回帰モデル：処置効果がないケース**</u>

時間を通じて一定の自己回帰係数$\rho_{zz}$と$\rho_{yy}$を持つ自己回帰モデルを想定したデータの生成。（モデルの詳細は参照サイトを参照）

※なお、参照サイトでは`year_start`を`year_init + 10`と計算しているが、定義上の`year_start`と一致しない。このようになっている理由は不明だが、以下では参照サイトの計算式に従う。
```{r}
smoking_fake <- smoking
years <- unique(smoking_fake$year)

smoking_fake$retprice[smoking_fake$year == 1] <- 
  alpha0_retprice + 
  rnorm(
    n = sum(smoking_fake$year == 1),
    mean = eta_mean,
    sd = eta_sd
  )

smoking_fake$cigsale[smoking_fake$year == 1] <- 
  alpha0_cigsale + 
  rho * smoking_fake$retprice[smoking_fake$year == 1] +
  rnorm(
    n = sum(smoking_fake$year == 1),
    mean = eta_mean,
    sd = eta_sd
  )  

for (
  t in years[2:length(years)]
) {
  smoking_fake$retprice[smoking_fake$year == t] <- 
    alpha0_retprice + 
    rho_zy*(
      (t - (year_init + 10)) / total_years
    )^2 * smoking_fake$cigsale[smoking_fake$year == t - 1] +
    rho_zz * (
      (t - year_init) / total_years
    ) * smoking_fake$retprice[smoking_fake$year == t - 1] + 
    rnorm(
      n = sum(smoking_fake$year == t),
      mean = eta_mean,
      sd = eta_sd
    )
  smoking_fake$cigsale[smoking_fake$year == t] <- 
    alpha0_cigsale + 
    rho * smoking_fake$retprice[smoking_fake$year == t] +
    rho_yy * (
      (t - year_init) / total_years
    )^2 * smoking_fake$cigsale[smoking_fake$year == t - 1] + 
    rnorm(
      n = sum(smoking_fake$year == t),
      mean = eta_mean,
      sd = eta_sd
    )  
}

smoking_fake_ar_no_effect <- smoking_fake
```

<br>

<u>**自己回帰モデル：処置効果があるケース**</u>

処置群のみ、処置発生の翌年以降、毎年比例的に減少する場合のデータを生成。
```{r}
smoking_fake <- smoking
years <- unique(smoking_fake$year)

smoking_fake$retprice[smoking_fake$year == 1] <- 
  alpha0_retprice + 
  rnorm(
    n = sum(smoking_fake$year == 1),
    mean = eta_mean,
    sd = eta_sd
  )

smoking_fake$cigsale[smoking_fake$year == 1] <- 
  alpha0_cigsale + 
  rho * smoking_fake$retprice[smoking_fake$year == 1] +
  rnorm(
    n = sum(smoking_fake$year == 1),
    mean = eta_mean,
    sd = eta_sd
  )

for (
  t in years[2:length(years)]
) {
  smoking_fake$retprice[smoking_fake$year == t] <- 
    alpha0_retprice + 
    rho_zy*((t - (year_init+10))/total_years)^2 *
    smoking_fake$cigsale[smoking_fake$year == t - 1] +
    rho_zz* ((t - year_init)/total_years) *
    smoking_fake$retprice[smoking_fake$year == t - 1] + 
    rnorm(
      n = sum(smoking_fake$year == t),
      mean = eta_mean,
      sd = eta_sd
    )
  smoking_fake$cigsale[smoking_fake$year == t] <- 
    alpha0_cigsale + 
    rho * smoking_fake$retprice[smoking_fake$year == t] +
    rho_yy * ((t - year_init)/total_years)^2 *
    smoking_fake$cigsale[smoking_fake$year == t - 1] + 
    rnorm(
      n = sum(smoking_fake$year == t),
      mean = eta_mean,
      sd = eta_sd
    )
  smoking_fake$cigsale[smoking_fake$year == t &
                         smoking_fake$state == 'California'] <- 
    smoking_fake$cigsale[smoking_fake$year == t &
                           smoking_fake$state == 'California'] * (
      1 - 
      runif(
        n = 1,
        te_unif_lower,
        te_unif_upper
      ) * (
        t > year_start
      )
    )
}

smoking_fake_ar_some_effect <- smoking_fake
```

## 分析と推計

### ファクターモデル：処置効果がないケース

関数の設定内容の詳細は参照サイトを参照。（以下、事前に定義した変数の再掲）
```{r}
# 合成コントロール法で合わせる期間の設定
# ・使用する共変量と顕在結果の時点の設定
# window_income_age <- 1980:1988
# window_beer <- 1984:1988
# # window_cigsale1 <- 1975
# # window_cigsale2 <- 1980
# # window_cigsale3 <- 1988
# ・ウェイトの計算に用いる期間の設定
# window_fit <- 1970:1988

# 最適化にあたって使用する、二次計画ソルバーに渡すチューニングパラメータの設定。
# margin_ipop <- 0.02
# sigf_ipop <- 7
# bound_ipop <- 6
```

```{r cache=TRUE}
smoking_out_factor_noeffect <- 
  smoking_fake_factor_no_effect %>% 
  tidysynth::synthetic_control(
    outcome = cigsale,
    unit = state,
    time = year,
    i_unit = name_treated,
    i_time = year_start,
    generate_placebos = TRUE
  ) %>% 
  tidysynth::generate_predictor(
    time_window = window_income_age,
    lnincome = mean(lnincome, na.rm = TRUE),
    youth = mean(age15to24, na.rm = TRUE)
  ) %>% 
  tidysynth::generate_predictor(
    time_window = window_beer,
    beer_sales = mean(beer, na.rm = TRUE)
  ) %>% 
  tidysynth::generate_predictor(
    time_window = window_cigsale1,
    cigsale1 = cigsale
  ) %>% 
  tidysynth::generate_predictor(
    time_window = window_cigsale2,
    cigsale2 = cigsale
  ) %>% 
  tidysynth::generate_predictor(
    time_window = window_cigsale3,
    cigsale3 = cigsale
  ) %>% 
  tidysynth::generate_weights(
    optimization_window = window_fit,
    margin_ipop = margin_ipop,
    sigf_ipop = sigf_ipop,
    bound_ipop = bound_ipop
  ) %>% 
  tidysynth::generate_control()
```

<U>**推定結果の表示**</u>

`plot_trends`で、合成コントロール系列と観測系列を比較するプロットを生成。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_trends()
```

`plot_differences`で、それらを差分として表示。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_differences()
```

`plot_weights`で、どの統制群とどの変数が予測に寄与しているかを表示。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_weights()
```

`grab_balance_table`で、予測に用いた変数の合成コントロールと実際の観測における類似の程度を表示。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::grab_balance_table() %>% 
  kbl() %>% 
  kable_styling()
```

<br>

<u>**プラセボ分析と推測統計**</u>

推計において`generate_placebos`をTRUEにすることで、統制群の各個体についても同様のウェイトが計算され、`plot_placebos`で全個体に対する予測と合成コントロール予測を可視化できる。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_placebos()
```

`prune = FALSE`とすることで、（予測がうまくいかず）自動で排除されていた個体も含む全ての個体を表示。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_placebos(
    prune = FALSE
  )
```

`plot_mspe_ratio`で、統制群のプラセボ予測誤差に比べて、処置群の予測誤差が 何番目に大きいかを表示。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::plot_mspe_ratio()
```

`grab_significance`で、処置個体と他の全てのプラセボ個体が同じ予測誤差を持っている場合の帰無仮説において、特定の順位が生じる確率が`fishers_exac_pvalue`として得られる。
```{r}
smoking_out_factor_noeffect %>% 
  tidysynth::grab_significance() %>% 
  head(10) %>% 
  kbl() %>% 
  kable_styling()
```
6番目に大きい`California`のp_valueは`0.1538`で、処置効果があるとは言えない結果となっている。

以上の手続きを関数化したもの↓
```{r cache=TRUE}
smoking_out_factor_noeffect_check <- 
  CausalInferenceTextbook::call_synthetic_control(
    data = smoking_fake_factor_no_effect,
    name_treated = name_treated,
    year_start = year_start,
    window_income_age = window_income_age,
    window_beer = window_beer,
    window_cigsale1 = window_cigsale1,
    window_cigsale2 = window_cigsale2,
    window_cigsale3 = window_cigsale3,
    margin_ipop = margin_ipop,
    sigf_ipop = sigf_ipop,
    bound_ipop = bound_ipop
  )
```

推定結果の一致を確認。
```{r}
smoking_out_factor_noeffect_check %>% 
  tidysynth::grab_balance_table() %>% 
  kbl() %>% 
  kable_styling()
```

```{r}
smoking_out_factor_noeffect_check %>% 
  tidysynth::grab_significance() %>% 
  head(10) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

### ファクターモデル：処置効果があるケース

```{r cache=TRUE}
smoking_out_some_effect <- 
  CausalInferenceTextbook::call_synthetic_control(
    data = smoking_fake_factor_some_effect,
    name_treated = name_treated,
    year_start = year_start,
    window_income_age = window_income_age,
    window_beer = window_beer,
    window_cigsale1 = window_cigsale1,
    window_cigsale2 = window_cigsale2,
    window_cigsale3 = window_cigsale3,
    margin_ipop = margin_ipop,
    sigf_ipop = sigf_ipop,
    bound_ipop = bound_ipop
  )
```

```{r}
smoking_out_some_effect %>% 
  tidysynth::plot_trends()
```

```{r}
smoking_out_some_effect %>% 
  tidysynth::plot_placebos()
```

```{r}
smoking_out_some_effect %>% 
  tidysynth::plot_mspe_ratio()
```

```{r}
smoking_out_some_effect %>% 
  tidysynth::grab_significance() %>% 
  head(10) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

### 自己回帰モデルでの挙動：処置効果がないケース

```{r cache=TRUE}
smoking_out_ar_noeffect <- 
    CausalInferenceTextbook::call_synthetic_control(
    data = smoking_fake_ar_no_effect,
    name_treated = name_treated,
    year_start = year_start,
    window_income_age = window_income_age,
    window_beer = window_beer,
    window_cigsale1 = window_cigsale1,
    window_cigsale2 = window_cigsale2,
    window_cigsale3 = window_cigsale3,
    margin_ipop = margin_ipop,
    sigf_ipop = sigf_ipop,
    bound_ipop = bound_ipop
  )
```

```{r}
smoking_out_ar_noeffect %>% 
  tidysynth::plot_trends()
```

```{r}
smoking_out_ar_noeffect %>% 
  tidysynth::plot_placebos()
```

```{r}
smoking_out_ar_noeffect %>% 
  tidysynth::plot_mspe_ratio()
```

```{r}
smoking_out_ar_noeffect %>% 
  tidysynth::grab_significance() %>% 
  head(10) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

### 自己回帰モデルでの挙動：処置効果があるケース

```{r}
smoking_out_ar_some_effect <- 
    CausalInferenceTextbook::call_synthetic_control(
    data = smoking_fake_ar_some_effect,
    name_treated = name_treated,
    year_start = year_start,
    window_income_age = window_income_age,
    window_beer = window_beer,
    window_cigsale1 = window_cigsale1,
    window_cigsale2 = window_cigsale2,
    window_cigsale3 = window_cigsale3,
    margin_ipop = margin_ipop,
    sigf_ipop = sigf_ipop,
    bound_ipop = bound_ipop
  )
```

```{r}
smoking_out_ar_some_effect %>% 
  tidysynth::plot_trends()
```

```{r}
smoking_out_ar_some_effect %>% 
  tidysynth::plot_placebos()
```

```{r}
smoking_out_ar_some_effect %>% 
  tidysynth::plot_mspe_ratio()
```

```{r}
smoking_out_ar_some_effect %>% 
  tidysynth::grab_significance() %>% 
  head(10) %>% 
  kbl() %>% 
  kable_styling()
```

<br>

**引用元コピーライト表示**

MIT License Copyright (c) 2020 Eric Dunford

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.











